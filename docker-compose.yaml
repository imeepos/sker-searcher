services:
  portainer:
    image: portainer/portainer-ce:latest # 社区版（推荐）
    container_name: portainer
    restart: unless-stopped
    ports:
      - "${PORTAINER_WEB_PORT}:9000" # Web 管理界面端口
      - "${PORTAINER_AGENT_PORT}:8000" # 用于 Edge Agent 通信（可选）
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # 允许 Portainer 管理本地 Docker
      - portainer_data:/data # 持久化存储配置数据
    networks:
      - postgres_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${HOST_NAME}`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: baihu_n8n
    ports:
      - ${N8N_PORT}:5678
    volumes:
      - n8n_data:/home/node/.n8n
    environment:
      - N8N_RUNNERS_ENABLED=true
      - N8N_PROTOCOL=http
      - N8N_PORT=5678
      - N8N_SECURE_COOKIE=false
    networks:
      - postgres_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n2.rule=Host(`n8n.${HOST_NAME}`)"
      - "traefik.http.services.n8n2.loadbalancer.server.port=5678"
  traefik:
    image: traefik:v3.0
    container_name: baihu_traefik
    ports:
      - "${TRAEFIK_PORT}:80"
      - "${TRAEFIK_SSL_PORT}:443"
      - 8080:8080
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - postgres_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${HOST_NAME}`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    restart: unless-stopped
    depends_on:
      - minio
      - mongodb
      - rabbitmq
      - redis
      - postgres
  minio:
    image: minio/minio:latest
    container_name: baihu_minio
    ports:
      - ${MINIO_PORT}:9000
      - ${MINIO_CONSOLE_PORT}:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - postgres_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${IP}:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: server /data --console-address ":9001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.${HOST_NAME}`)"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
  mongodb:
    image: mongo:latest
    container_name: baihu_mongodb
    ports:
      - ${MONGODB_PORT}:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - postgres_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongodb.rule=Host(`mongodb.${HOST_NAME}`)"
      - "traefik.http.services.mongodb.loadbalancer.server.port=27017"
  rabbitmq:
    image: rabbitmq:3-management
    container_name: baihu_rabbitmq
    ports:
      - ${RABBITMQ_PORT}:5672
      - ${RABBITMQ_MANAGEMENT_PORT}:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - postgres_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${HOST_NAME}`)"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
  redis:
    image: redis:latest
    container_name: baihu_redis
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis_data:/data
    networks:
      - postgres_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis.rule=Host(`redis.${HOST_NAME}`)"
      - "traefik.http.services.redis.loadbalancer.server.port=6379"
  postgres:
    image: postgres:latest
    container_name: baihu_postgres
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - postgres_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`postgres.${HOST_NAME}`)"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"
networks:
  postgres_network:
    driver: bridge
volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  portainer_data:
    driver: local
